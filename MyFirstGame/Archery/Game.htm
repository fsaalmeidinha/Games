<!--https://openclipart.org/detail/202285/bow-and-arrow-by-monsterbraingames-202285-->
<!--http://examples.phaser.io/-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <meta charset="UTF-8" />
    <title>Archery!</title>
    <script src="../phaser/phaser.min.js"></script>
    <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>
</head>
<body>
    <script type="text/javascript">

        var game;

        window.onload = function () {
            var cursors;
            var maxVelocity = 486;
            var minVelocity = 150;
            var arrowVelocity = minVelocity;
            var arrowVelocityInterval = 8;
            var arrow;
            var bow;
            var tronco_arqueiro;
            var pernas_arqueiro;
            var isMousePressed = false;
            var increaseVelocity = true;
            var strength;
            var minPosY = 50;
            var maxPosY = 500;
            var baloes;
            var shootedArrows;
            var score = 0;
            var score_text;
            var baloesPerdidos = 0;

            game = new Phaser.Game(800, 600, Phaser.AUTO, '', { preload: preload, create: create, update: update });
            //            var arrow;

            function preload() {
                game.load.image('sky', 'imgs/sky.png');
                game.load.image('arrow', 'imgs/arrow.png');
                game.load.image('bow', 'imgs/bow.png');
                game.load.image('tronco_arqueiro', 'imgs/tronco_arqueiro.png');
                game.load.image('pernas_arqueiro', 'imgs/pernas_arqueiro.png');
                game.load.image('strength_bar', 'imgs/strength_bar.png');
                game.load.image('strength', 'imgs/strength.png');
                game.load.image('balao_azul', 'imgs/balao_azul.png');
            }

            function create() {
                game.physics.setBoundsToWorld();

                game.add.sprite(0, 0, 'sky');
                createArrow();

                bow = game.add.sprite(50, 295, 'bow');
                game.physics.arcade.enable(bow);
                bow.anchor.setTo(0, 0.5);

                tronco_arqueiro = game.add.sprite(5, 290, 'tronco_arqueiro');
                pernas_arqueiro = game.add.sprite(2, 325, 'pernas_arqueiro');
                game.physics.arcade.enable(tronco_arqueiro);
                tronco_arqueiro.anchor.setTo(0, 0.5);

                game.input.mouse.onMouseDown = mouseDown;
                game.input.mouse.onMouseUp = mouseUp;

                cursors = game.input.keyboard.createCursorKeys();

                scoreText = game.add.text(16, 16, 'Score: ' + score + '/' + baloesPerdidos, { fontSize: '10px', fill: '#000' });

                game.add.sprite(10, 40, 'strength_bar');
                strength = game.add.sprite(14, 45, 'strength');
                game.add.text(32, 45, 'Strength', { font: "11px Arial", fill: "black", align: "center" });


                shootedArrows = game.add.group();


                baloes = game.add.group();
                baloes.enableBody = true;
                //                baloes.create(300 * Math.random() + 450, 500 * Math.random() + 50, 'balao_azul');

                game.time.events.loop(Phaser.Timer.SECOND * 1, adicionarBalao, this);
            }

            function handlePlayerMovement() {
                if (cursors.up.isDown) {
                    if (tronco_arqueiro.y > minPosY) {
                        tronco_arqueiro.y -= 5;
                        pernas_arqueiro.y -= 5;
                    }
                }
                else if (cursors.down.isDown) {
                    if (tronco_arqueiro.y < maxPosY) {
                        tronco_arqueiro.y += 5;
                        pernas_arqueiro.y += 5;
                    }
                }
            }

            function update() {
                updateArrowAndBowAngleAccordingToPointer();
                updateArrowAngleAfterShooting();

                if (isMousePressed) {
                    actualizeArrowVelocity();
                }
                else {
                    handlePlayerMovement();
                }

                game.physics.arcade.overlap(shootedArrows, baloes, explodirBalao, null, this);
                scoreText.text = 'Score: ' + score + '/' + baloesPerdidos;
            }

            function createArrow() {
                arrow = game.add.sprite(50, 300, 'arrow');
                game.physics.arcade.enable(arrow);
                arrow.anchor.setTo(0, 0.5);
                arrow.checkWorldBounds = true;
                arrow.events.onOutOfBounds.add(removerElementosForaDaTela, this);
            }

            function mouseDown(pointer) {
                //                game.debug.text('a tan: ' + pointer.x, 32, 232);
                //                arrow.body.velocity.x = 300;
                //                arrow.body.velocity.y = -200;

                arrowVelocity = minVelocity;
                increaseVelocity = true;
                isMousePressed = true;
            }

            function mouseUp(pointer) {
                isMousePressed = false;
                //                updateArrowAndBowAngle = updateArrowAngleAfterShooting;

                var targetAngle = game.math.angleBetween(
                arrow.x, arrow.y,
                game.input.activePointer.x, game.input.activePointer.y);
                arrow.rotation = targetAngle;

                arrow.body.gravity.y = 80;
                arrow.body.velocity = game.physics.arcade.velocityFromAngle(arrow.angle, arrowVelocity);
                arrow.anchor.setTo(0.5, 0.5);
                shootedArrows.addChild(arrow);
                createArrow();
                strength.scale.setTo(0, 1);
            }

            function actualizeArrowVelocity() {
                if (increaseVelocity) {
                    if (arrowVelocity >= maxVelocity) {
                        increaseVelocity = false;
                        actualizeArrowVelocity();
                    }
                    else {
                        arrowVelocity += arrowVelocityInterval;
                    }
                }
                else {
                    if (arrowVelocity <= minVelocity) {
                        increaseVelocity = true;
                        actualizeArrowVelocity();
                    }
                    else {
                        arrowVelocity -= arrowVelocityInterval;
                    }
                }

                var strengthScale = ((arrowVelocity - minVelocity) / 4);
                strength.scale.setTo(strengthScale, 1);
            }

            function updateArrowAndBowAngleAccordingToPointer() {
                var targetAngle = game.math.angleBetween(
                tronco_arqueiro.x, tronco_arqueiro.y,
                game.input.activePointer.x, game.input.activePointer.y);

                arrow.rotation = targetAngle;
                bow.rotation = targetAngle;
                tronco_arqueiro.rotation = targetAngle;

                var piRadRotation = tronco_arqueiro.body.rotation * (Math.PI / 180);
                var deslocamentoX = Math.cos(piRadRotation) * 25;
                var deslocamentoY = Math.sin(piRadRotation) * 25;
                arrow.x = tronco_arqueiro.x + deslocamentoX;
                arrow.y = tronco_arqueiro.y + deslocamentoY + 7;
                bow.x = tronco_arqueiro.x + deslocamentoX;
                bow.y = tronco_arqueiro.y + deslocamentoY + 4;
            };

            function updateArrowAngleAfterShooting() {
                $(shootedArrows.children).each(function (ind, shootedArrow) {
                    if (shootedArrow.y > 600) {
                        shootedArrow.kill;
                    }
                    else {
                        var aTan = Math.atan2(shootedArrow.body.velocity.y, shootedArrow.body.velocity.x);
                        //                game.debug.text('a tan: ' + aTan, 32, 232);
                        //                arrow.rotation = arrow.angle;


                        var targetAngle = game.math.angleBetween(
                shootedArrow.body.velocity.x, shootedArrow.body.velocity.y,
                shootedArrow.x, shootedArrow.y);
                        shootedArrow.rotation = aTan;
                    }
                });
            };

            function explodirBalao(arrow, balao) {
                balao.kill();
                score = score + 1;
                //                baloes.create(300 * Math.random() + 450, 500 * Math.random() + 50, 'balao_azul');
            }

            function adicionarBalao() {
                var balao = baloes.create(game.rnd.integerInRange(200, 750), 1, 'balao_azul');
                balao.body.velocity.y = game.rnd.integerInRange(100, 140);
                balao.checkWorldBounds = true;
                balao.events.onOutOfBounds.add(removerElementosForaDaTela, this);
                balao.name = 'balao';
            }

            function removerElementosForaDaTela(elemento) {
                elemento.kill();
                if (elemento.name == 'balao') {
                    baloesPerdidos += 1;
                }
            }
        };
    </script>
</body>
</html>
